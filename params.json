{"name":"Hexagonal TDD in Ruby - Screencast Series","tagline":"How to TDD a hexagonal application","body":"In this screencast series, we will demystify hexagonal architectures, showing a simple way to TDD a hexagonal application into existence. We will build pieces of Pivotal's \"Whiteboard\" Application (a web application that facilitates both the presentation and the sharing out of office-wide standup items). \r\n\r\n### Episode 1\r\n\r\nIn this episode, we TDD our first use case for the whiteboard application into existence; we hand roll a spy and a fake across two significant (and common) architectural boundaries – and we discuss when we use test doubles, and why. \r\n\r\nWe also create a contract for our fake repository, and tease out a message passing protocol between the use case and GUI. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}